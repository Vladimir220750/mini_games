// monorepo/apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MatchStatus {
  WAITING_FOR_PLAYERS
  COMMIT_PHASE
  REVEAL_PHASE
  COMPLETED
  CANCELLED
}

enum RpsChoice {
  ROCK
  PAPER
  SCISSORS
}

model User {
  id        String   @id @default(uuid())
  wallet    String   @unique
  banned    Boolean  @default(false)
  createdAt DateTime @default(now())
  matchesA  Match[]  @relation("playerA")
  matchesB  Match[]  @relation("playerB")
}

model Match {
  id             String      @id @default(uuid())
  status         MatchStatus @default(WAITING_FOR_PLAYERS)
  wager          BigInt
  playerAId      String
  playerA        User        @relation("playerA", fields: [playerAId], references: [id])
  playerBId      String?
  playerB        User?       @relation("playerB", fields: [playerBId], references: [id])
  commitA        String?
  commitB        String?
  revealA        RpsChoice?
  revealB        RpsChoice?
  winnerId       String?
  winner         User?       @relation("winner", fields: [winnerId], references: [id])
  commitDeadline DateTime?
  revealDeadline DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  auditLogs      AuditLog[]
}

model AuditLog {
  id        String   @id @default(uuid())
  matchId   String
  type      String
  payload   Json
  createdAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
}
